@page "/editgame"
@page "/editgame/{id:guid}"

@inject NavigationManager Navigation
@inject GamesClient GamesClient
@inject GenresClient GenresClient
@rendermode InteractiveServer

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>
@if (_genres is null || _game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@_game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="_game.Name" class="form-control" />
                    <ValidationMessage For="()=>_game.Name" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="_game.GenreId" class="form-select">
                        <option value="">Select a genre</option>
                        @foreach (var genre in _genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="()=>_game.GenreId" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="Price" @bind-Value="_game.Price" class="form-control" />
                    <ValidationMessage For="()=>_game.Price" />
                </div>
                <div class="mb-3">
                    <label for="releasedate" class="form-label">Release Date:</label>
                    <InputDate id="releasedate" @bind-Value="_game.ReleaseDate" class="form-control" />
                    <ValidationMessage For="()=>_game.ReleaseDate" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}



@code {

    [Parameter]
    public Guid? Id { get; set; }

    [SupplyParameterFromForm]
    private GameDetails _game { get; set; }
    private Genre[]? _genres;
    private string _title = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        if (_game is not null)
        {
            return;
        }
        if (Id is not null)
        {
            _game =await GamesClient.GetGameAsync(Id.Value);
            _title = $"Edit {_game.Name}";
        }
        else
        {
            _game = new()
                {
                    Name = string.Empty,
                    ReleaseDate = DateTime.Now
                };
            _title = "New Game";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _genres =await GenresClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(_game);
        if (Id is null)
        {
           await GamesClient.AddGameAsync(_game);
        }
        else
        {
            _game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(_game);
        }
        Navigation.NavigateTo("/");
    }
}
